version: '3.7'

services:
  # mysql
  mysql8-container:
    container_name: mysql8-container
    image: mysql:${MYSQL_TAG}
    restart: always
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    ports:
      - "${MYSQL_PORT}:3306"
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      timeout: 20s
      retries: 10
    # volumes:
    #   - ./sql/shopapp.sql:/docker-entrypoint-initdb.d/init-script.sql
    networks:
      - shopapp-network

  # redis
  redis-container:
    container_name: redis-container
    image: redis:${REDIS_TAG}
    restart: always
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - ./redis-data:/data
    networks:
      - shopapp-network

  # neo4j
  neo4j-container:
    container_name: neo4j-container
    image: neo4j:${NEO4J_TAG}
    ports:
      - "${NEO4J_HTTP_PORT}:7474"
      - "${NEO4J_BOLT_PORT}:7687"
    environment:
      - NEO4J_AUTH=${NEO4J_AUTH}
    volumes:
      - ./neo4j:/data
    networks:
      - shopapp-network

  # zookeeper-01
  zookeeper-01:
    image: confluentinc/cp-zookeeper:${ZOOKEEPER_TAG}
    hostname: zookeeper-01
    container_name: zookeeper-01
    ports:
      - "${ZOOKEEPER_01_PORT}:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper-01:2888:3888;zookeeper-02:2888:3888;zookeeper-03:2888:3888
    networks:
      - shopapp-network

  # zookeeper-02
  zookeeper-02:
    image: confluentinc/cp-zookeeper:${ZOOKEEPER_TAG}
    hostname: zookeeper-02
    container_name: zookeeper-02
    ports:
      - "${ZOOKEEPER_02_PORT}:2182"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2182
      ZOOKEEPER_SERVER_ID: 2
      ZOOKEEPER_SERVERS: zookeeper-01:2888:3888;zookeeper-02:2888:3888;zookeeper-03:2888:3888
    networks:
      - shopapp-network

  # zookeeper-03
  zookeeper-03:
    image: confluentinc/cp-zookeeper:${ZOOKEEPER_TAG}
    hostname: zookeeper-03
    container_name: zookeeper-03
    ports:
      - "${ZOOKEEPER_03_PORT}:2183"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2183
      ZOOKEEPER_SERVER_ID: 3
      ZOOKEEPER_SERVERS: zookeeper-01:2888:3888;zookeeper-02:2888:3888;zookeeper-03:2888:3888
    networks:
      - shopapp-network

  # kafka-broker-01
  kafka-broker-01:
    image: confluentinc/cp-kafka:${KAFKA_TAG}
    hostname: kafka-broker-01
    container_name: kafka-broker-01
    networks:
      - shopapp-network
    depends_on:
      - zookeeper-01
      - zookeeper-02
      - zookeeper-03
    ports:
      - "${KAFKA_PORT_01}:9093"
      - "${KAFKA_PORT_02}:29092"
      - "${KAFKA_PORT_03}:9999"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper-01:2181,zookeeper-02:2182,zookeeper-03:2183"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-broker-01:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://kafka-broker-01:29092
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:19092,EXTERNAL://0.0.0.0:9092,DOCKER://0.0.0.0:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka-broker-01:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"

  # shopapp connect
  shopapp-spring-container:
    container_name: shopapp-spring-container
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8099:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql8-container:3307/shopapp?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
      MYSQL_ROOT_PASSWORD: 12042003
      REDIS_HOST: redis-container
      REDIS_PORT: ${REDIS_PORT}
      KAFKA_BROKER_SERVER: kafka-broker-01
      KAFKA_BROKER_PORT: 29092
    depends_on:
      - mysql8-container
      - redis-container
      - kafka-broker-01
    networks:
      - shopapp-network
    healthcheck:
      # test: [ "CMD-SHELL", "curl --fail http://localhost:8080/health_check/health || exit 1" ]
      test: [ "CMD-SHELL", "curl --fail http://localhost:8080/api/v1/actuator/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

# network
networks:
  shopapp-network:
    name: shopapp-network
    driver: bridge

# RUN DOCKER
# docker-compose up -d
# docker-compose up -d mysql8-container
# docker-compose up -d redis-container
# docker-compose up -d neo4j-container
# docker-compose up -d zookeeper-01
# docker-compose up -d zookeeper-02
# docker-compose up -d zookeeper-03
# docker-compose up -d kafka-broker-01
# docker-compose up -d shopapp-spring-container
